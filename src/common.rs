use std::{collections::HashSet, sync::LazyLock};

pub const COMMON_STRINGS: LazyLock<HashSet<&str>> = LazyLock::new(|| {
    HashSet::from([
        " ",
        "anonymous",
        "apply",
        "arguments",
        "async",
        "as",
        "await",
        "break",
        "call",
        "case",
        "catch",
        "chrome",
        "class",
        "console",
        "constructor",
        "const",
        "continue",
        "debugger",
        "default",
        "define",
        "delete",
        "do",
        "else",
        "enum",
        "eval",
        "exports",
        "export",
        "extends",
        "false",
        "finally",
        "for",
        "from",
        "function",
        "get",
        "if",
        "implements",
        "import",
        "instanceof",
        "interface",
        "in",
        "length",
        "let",
        "load",
        "log",
        "meta",
        "module",
        "name",
        "new",
        "null",
        "object",
        "of",
        "package",
        "private",
        "protected",
        "prototype",
        "public",
        "raw",
        "RegExp",
        "require",
        "return",
        "self",
        "set",
        "static",
        "super",
        "switch",
        "target",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "undefined",
        "use strict",
        "var",
        "void",
        "warn",
        "while",
        "window",
        "with",
        "yield",
        "*default*",
        "<main>",
        "__proto__",
    ])
});
